  compounds,molecules,mixtures are lists,sets,dictionaries,sets,tuples
linear ds=linked list
tress-binary,n-ary
graphs-
algorithms:
brute force(trail and error)
two pointer technique(left,right),three pointer(left,right,middle)
fixed window,varioable window
  30-40 % problems can be solved
recursion
iteration is human
recursion is divine
5) divede and conquer
6) greedy
backtracking
branch and bound
dynamic programing
dynamic programing+recurision =70% can be formed
reading comprehension
fundamentals of 
how to read better and faster-norman louis
  ipl
ipl has 10 teams,every team only plays with every team only one time.help organinsers
n=int(input())
sum=0
for i in range(1,n):
    sum=sum+i
print(sum)
  ............\
def get_matches(n):
  ft,lt,nt =1,n-1,n-1
  return nt*(ft+lt)//2
get_matches=lambda n : (n-1)*(1+n-1)//2
n=int(input())
print(get_matches(n))
.........................
1,3,5,.......nth=2n-1
n/2(1+2n-1)
..............
1,4,7,10,13...nth term =3n-2
n/2(1+3n-2)
...........
given 
a0+a1x+a2x^2+a3x^3+....anX^n
a0,a1,a2----an
nterms=n+1
  a0,a1,a2----an
    a0+a1x+a2x^2+a3x^3+....anX^n
sum=a0+a1x+a2x^2+a3x^3+....anX^n
    

def getSum(nterms,a,x):
  n=nterms-1
  summ=a[0]
  nm=0
  for i in range(1,n+1):
    product =1 
    for j in range(1,i+1):
      product=product*x 
      nm+=1
    summ=summ+a[i]*product
  print(nm)
  return summ
  
nterms=int(input())
a=list(map(float,input().split(" ")))
x=float(input())
print(getSum(nterms,a,x))
5
2 3 4 5 6
2
Output:

10
160.0
......................
horners rule:
a0+a1x+a2x^2+a3x^3+a4x^4
1+2+3+4=10 multi
a4x^4+a3x^3+......
(((a4x+a3)x+a2)x+a1)x+a0)
summ=a4
for i in range(3,-1,-1):
summ=summ*x+ai
i=3
sum=a4x+a3
............
#horners rules
def getSumH(nterms,a,x):
  n=nterms-1
  nm=0
  summ=a[n]
  for i in range(n-1,-1,-1):
    summ=summ*x+a[i]
    nm+=1 
 # return [summ,nm]
  return str(nm)+ " "+str(summ)

  
nterms=int(input())
a=list(map(float,input().split(" ")))
x=float(input())
print(getSumH(nterms,a,x))

Output:

4 160.0
...............................
23,24,25,26,27,28,29
23 and 29 for 25
1-2
2-3
.........................
def get_near(n):
  #left travel
  i=1 
  while True:
    if is_primee(n-i):
      break
    i=i+1
  #right travel
  j=1 
  while True:
    if is_primee(n+j):
      break
    j=j+1 
  return str(n-1)+ " "+str(n+j)

def is_primee(n):
  if n==1:
    return False
  i=2
  while i<=n//2:
    if n%i == 0:
      return False
    i=i+1 
  return True
n= int(input())
if n==1:
  print("2")
elif n==2:
  print("3")
else:
  print(get_near(n))
............................
how many leap years in 1AD to 2025AD

def leap(num):
  if num%4==0:
    if num %100==0:
      return True if num%400 ==0 else False
      return False
    return True
nLeap=0 
for i in range(1,2026):
  if leap(i):
    nLeap+=1 
print(nLeap)

...............
i am a superstiuos person
9999->sum=36->sum=9
1232->sum=9
rto=[1234,3678,3666,9898,3636,8055]
sum of digits
n=input()
total=0
for i in range(len(n)):
  total=total+int(n[i])
print(total)
.....
def get_accepted_numbers(numbers):
    accepted = []
    for number in numbers:
        if isAccepted(number):
            accepted.append(number)
    return accepted

def isAccepted(number):
    while number >= 10:
        number = sum(int(d) for d in str(number))  # sum of digits
    return number == 9

# Input and output
numbers = list(map(int, input().split()))
print(get_accepted_numbers(numbers))
.........................
def get_accepted_numbers(numbers):
  accepted=[]
  for number in numbers:
    if isAccepted(number):
      accepted.append(number)
  return accepted
def isAccepted(n):
  total=0
  while n!=0:
    total+=n%10
    n=n//10
  while total>9:
    total=total//10 + total %10
  return True if total==9 else False
  
    
numbers=list(map(int,input().split(" ")))
print(get_accepted_numbers(numbers))

1234 2345 3636 9898 7777 8919 1111
Output:

[3636, 8919]
this is modular programming
.....................................................
find out 978th prime
1st prime is 2
             3
             5
25th prime is 97
find nth prime.

import math

def isPrime(n):
    if n <= 1:
        return False
    if n == 2:
        return True
    if n % 2 == 0:
        return False
    i = 3
    while i <= int(math.sqrt(n)):
        if n % i == 0:
            return False
        i += 2
    return True

def nth_prime(num):
    if num == 1:
        return 2
    count = 1  # We already count '2' as the first prime
    candidate = 3
    while True:
        if isPrime(candidate):
            count += 1
        if count == num:
            return candidate
        candidate += 2  # Skip even numbers (optimization)

# Example
print(nth_prime(25))  # Output: 97

Output:

97
..............................................................
hw:
given a series of numbers
1,2,1,3,2,5,3,7------
            







